#!groovy
// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-maven-skopeo-centos7:v3.9",
      resourceRequestMemory: "2Gi",
      resourceLimitMemory: "3Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Define Maven Command to point to correct nexus_settings.xml.
    def mvnCmd = "mvn -s ../nexus_settings.xml"
    // Define Maven Sonarqube Command.
    def mvnSonar = "mvn sonar:sonar -s ../nexus_settings.xml"

    // Checkout Source Code
    stage('Checkout Source') {
      git 'https://github.com/paulgreenbank/openshift-app-development.git'
    }

    // Extract version and other properties from the pom.xml
    def groupId    = getGroupIdFromPom("MLBParks/pom.xml")
    def artifactId = getArtifactIdFromPom("MLBParks/pom.xml")
    def version    = getVersionFromPom("MLBParks/pom.xml")

    // Set the tag for the development image: version + build number
    def devTag  = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    // Using Maven build the war file
    stage('Build war') {
      echo "Building version ${version}"
      sh "sed -i \"s/GUID/${GUID}/g\" nexus_settings.xml"
      dir('MLBParks') {
        sh "${mvnCmd} clean install -DskipTests=true"
      }
    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      echo "Running Unit Tests"
      dir('MLBParks') {
        sh "${mvnCmd} test"
      }
    }
  
    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      echo "Running Code Analysis"
      dir('MLBParks') {
        sh "${mvnSonar} -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER}"
      }
    }

    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      echo "Publish to Nexus"
      dir('MLBParks') {
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
      }
    }

    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      echo "Building OpenShift container image mlbparks:${devTag}"
      // Start build with compiled file from Nexus
      sh "oc start-build mlbparks --from-file=http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases/com/openshift/evg/roadshow/mlbparks/${version}/mlbparks-${version}.war --follow -n ${GUID}-parks-dev"
      // Tag Image with new tag generated via pipeline syntax generator in Jenkins
      openshiftTag alias: 'false', destStream: 'mlbparks', destTag: "${devTag}", destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'
    }

    // Blue/Green Deployment into Dev
    // -------------------------------------
    // Do not activate the new version yet.
    def destDevColour = "Blue"
    def activeDevColour = "Green"

    stage('Blue/Green Dev Deployment') {
      // Logic to identify next deployment colour (blue or green)
      activeDevColour = sh(returnStdout: true, script: "oc get service mlbparks -n ${GUID}-parks-dev -o 'jsonpath={ .metadata.labels.activeDevColour }' --ignore-not-found=true").trim()
      if (activeDevColour == "Blue") {
        destDevColour = "Green"
      }

      // Deploy the built image to the Development Environment.
      echo "Deploying container image to Development Project"
      // Set Deployment image to correct version
      sh "oc set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${devTag} -n ${GUID}-parks-dev"
      // Update configMap used to set build (blue/green) deployment
      sh "oc delete configmap mlbparks-config -n ${GUID}-parks-dev --ignore-not-found"
      sh "oc create configmap mlbparks-config -n ${GUID}-parks-dev --from-literal=APPNAME='MLB Parks (Dev)' --from-literal=DEPLOYNAME='${destDevColour}'"
      // Deploy image
      openshiftDeploy depCfg: 'mlbparks', namespace: "${GUID}-parks-dev", verbose: 'false', waitTime: '', waitUnit: 'sec'
      // Verify Deployment
      openshiftVerifyDeployment depCfg: 'mlbparks', namespace: "${GUID}-parks-dev", verbose: 'false', replicaCount: '1', verifyReplicaCount: 'false', waitTime: '30', waitUnit: 'sec'
      // Recreate MLB back-end service
      sh "oc delete service mlbparks -n ${GUID}-parks-dev --ignore-not-found=true"
      sh "oc expose dc mlbparks --port 8080 --labels=type=parksmap-backend,activeDevColour=${destDevColour} -n ${GUID}-parks-dev"
      // Verify Service
      openshiftVerifyService apiURL: '', authToken: '', namespace: "${GUID}-parks-dev", svcName: 'mlbparks', verbose: 'false'
    }
  
    // Run Integration Tests in the Development Environment.
    stage('Dev Integration Tests') {
      echo "Running Integration Tests"
      // Waiting for Application
      sleep 35
      // Curl status of application with /wz/health/ URL
      sh "curl http://mlbparks.${GUID}-parks-dev.svc.cluster.local:8080/ws/healthz/ | grep -q 'OK'"
      // Curl endpoint to load data from application into backend database
      sh "curl http://mlbparks.${GUID}-parks-dev.svc.cluster.local:8080/ws/data/load/ | grep -q 'Items inserted in database: 30'"
    }

    // Copy Image to Nexus Docker Registry
    stage('Copy Image to Nexus Docker Registry') {
      echo "Copy image to Nexus Docker Registry"
      sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds=admin:admin123 docker://docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${devTag} docker://nexus-registry-${GUID}-nexus.apps.${CLUSTER}/${GUID}-parks-dev/mlbparks:${devTag}"
      openshiftTag alias: 'false', destStream: 'mlbparks', destTag: "${prodTag}", destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'mlbparks', srcTag: "${devTag}", verbose: 'false'
    }

    // Blue/Green Deployment into Production
    // -------------------------------------
    // Do not activate the new version yet.
    def destApp   = "mlbparks-blue"
    def destColour = "Blue"
    def activeApp = "mlbparks-green"
    def activeColour = "Green"
    
    stage('Blue/Green Production Deployment') {
      // Logic to identify next deployment colour (blue or green)
      activeApp = sh(returnStdout: true, script: "oc get service mlbparks -n ${GUID}-parks-prod -o 'jsonpath={ .spec.selector.app }' --ignore-not-found=true").trim()
      if (activeApp == "mlbparks-blue") {
        destApp = "mlbparks-green"
    	destColour = "Green"
      }
      echo "Active Application:      " + activeApp
      echo "Destination Application: " + destApp
    
      // Update the Image on the Production Deployment Config
      sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${prodTag} -n ${GUID}-parks-prod"
    
      // Update the Config Map which contains the deployment colour for the MLBParks application
      sh "oc delete configmap mlbparks-config -n ${GUID}-parks-prod --ignore-not-found=true"
      sh "oc create configmap mlbparks-config --from-literal=APPNAME='MLB Parks (${destColour})' -n ${GUID}-parks-prod"
    
      // Deploy the inactive application.
      openshiftDeploy depCfg: destApp, namespace: "${GUID}-parks-prod", verbose: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyDeployment depCfg: destApp, namespace: "${GUID}-parks-prod", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
      openshiftVerifyService namespace: "${GUID}-parks-prod", svcName: "${destApp}", verbose: 'false'
    }

    stage('Prod Integration Tests') {
      echo "Running Integration Tests"
      // Waiting for Application
      sleep 35
      // Curl status of application with /wz/health/ URL
      sh "curl http://${destApp}.${GUID}-parks-prod.svc.cluster.local:8080/ws/healthz/ | grep -q 'OK'"
      // Curl endpoint to load data from application into backend database
      sh "curl http://${destApp}.${GUID}-parks-prod.svc.cluster.local:8080/ws/data/load/ | grep -q 'Items inserted in database: 30'"
    }

    stage('Switch over to new Version') {
      // input "Switch Production?"
      echo "Switching Production application to ${destApp}."
      sh "oc delete service mlbparks -n ${GUID}-parks-prod --ignore-not-found=true"
      sh "oc expose dc ${destApp} --name=mlbparks --port 8080 --labels=type=parksmap-backend,activeApp=${destApp} -n ${GUID}-parks-prod"
    }
 
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
