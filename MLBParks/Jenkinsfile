#!groovy
// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-maven-skopeo-centos7:v3.9",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Define Maven Command to point to correct nexus_settings.xml.
    def mvnCmd = "mvn -s ../nexus_settings.xml"
    // Define Maven Sonarqube Command.
    def mvnSonar = "mvn sonar:sonar -s ../nexus_settings.xml"

    // Checkout Source Code
    stage('Checkout Source') {
      git 'https://github.com/paulgreenbank/openshift-app-development.git'
    }

    // Extract version and other properties from the pom.xml
    def groupId    = getGroupIdFromPom("MLBParks/pom.xml")
    def artifactId = getArtifactIdFromPom("MLBParks/pom.xml")
    def version    = getVersionFromPom("MLBParks/pom.xml")

    // Set the tag for the development image: version + build number
    def devTag  = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    // Using Maven build the war file
    stage('Build war') {
      echo "Building version ${version}"
      sh "sed -i \"s/GUID/${GUID}/g\" nexus_settings.xml"
      dir('MLBParks') {
        sh "${mvnCmd} clean install -DskipTests=true"
      }
    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      echo "Running Unit Tests"
      dir('MLBParks') {
        sh "${mvnCmd} test"
      }
    }
  
    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      echo "Running Code Analysis"
      dir('MLBParks') {
        sh "${mvnSonar} -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER}"
      }
    }

    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      echo "Publish to Nexus"
      dir('MLBParks') {
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
      }
    }

    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      // echo "Building OpenShift container image mlbparks:${devTag}"
      // Start build with compiled file from Nexus
      //sh "oc start-build mlbparks --from-file=http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/mlbparks-${version}.war --follow -n ${GUID}-parks-dev"
      // Tag Image with new tag generated via pipeline syntax generator in Jenkins
      // openshiftTag alias: 'false', destStream: 'mlbparks', destTag: "${devTag}", destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'
    }
 
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
