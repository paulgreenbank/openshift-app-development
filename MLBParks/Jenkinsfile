#!groovy
// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-maven-skopeo-centos7:v3.9",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Define Maven Command to point to correct nexus_settings.xml.
    def mvnCmd = "mvn -s ../nexus_settings.xml"
    // Define Maven Sonarqube Command.
    def mvnSonar = "mvn sonar:sonar -s ../nexus_settings.xml"

    // Checkout Source Code
    stage('Checkout Source') {
      git 'https://github.com/paulgreenbank/openshift-app-development.git'
    }

    // Extract version and other properties from the pom.xml
    def groupId    = getGroupIdFromPom("MLBParks/pom.xml")
    def artifactId = getArtifactIdFromPom("MLBParks/pom.xml")
    def version    = getVersionFromPom("MLBParks/pom.xml")

    // Set the tag for the development image: version + build number
    def devTag  = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    // Using Maven build the war file
    stage('Build war') {
      echo "Building version ${version}"
      dir('MLBParks') {
        sh "${mvnCmd} clean install -DskipTests=true"
      }
    }
 
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
